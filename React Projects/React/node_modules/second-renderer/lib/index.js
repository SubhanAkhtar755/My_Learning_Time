'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const INITIAL_RERENDER_DELAY = 100;
const RERENDER_DELAY_ERROR = 400;

const log = (0, _debug2.default)('second:renderer');

class Renderer {
  constructor({ VDom, VDomServer, componentIsReady = () => true }) {
    this.VDom = VDom;
    this.VDomServer = VDomServer;
    this.componentIsReady = componentIsReady;
  }

  reset() {
    this._reRenderDelay = INITIAL_RERENDER_DELAY;
  }

  render(Component, params) {
    this.reset();

    return this.renderUntilComplete(this.VDomServer.renderToString, Component, params);
  }

  renderStatic(Component, params) {
    this.reset();

    return this.renderUntilComplete(this.VDomServer.renderToStaticMarkup, Component, params);
  }

  renderUntilComplete(render, Component, params) {
    const componentName = Component.displayName || Component.name;

    log(`Starting render of ${componentName}`);

    const delayTime = this.reRenderDelay();

    return new _bluebird2.default((resolve, reject) => {
      const rendered = render(this.VDom.createElement(Component, params));

      if (!this.componentIsReady()) {
        log(`Component is not ready. Trying again in ${delayTime}ms.`);

        resolve(_bluebird2.default.delay(delayTime).then(() => this.renderUntilComplete(render, Component, params)));
      }

      log(`Completed render of ${componentName}`);

      resolve(rendered);
    }).catch(e => {
      if (!this.componentIsReady() && delayTime < RERENDER_DELAY_ERROR) {
        log(`[Error] ${e}`);
        log(`Error thrown by ${componentName}, but component is not ready. Trying again in ${delayTime}ms.`);

        return _bluebird2.default.delay(delayTime).then(() => this.renderUntilComplete(render, Component, params));
      }

      throw e;
    });
  }

  reRenderDelay() {
    const delay = this._reRenderDelay;

    this._reRenderDelay = Math.ceil(this._reRenderDelay * 1.1);

    return delay;
  }
}
exports.default = Renderer;
module.exports = exports['default'];